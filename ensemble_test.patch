diff --git a/tools/statistical_ensemble_test/ensemble.py b/tools/statistical_ensemble_test/ensemble.py
index 042d335c4..08e0b513e 100644
--- a/tools/statistical_ensemble_test/ensemble.py
+++ b/tools/statistical_ensemble_test/ensemble.py
@@ -27,11 +27,11 @@ def get_pertlim_uf(rand_num):
        k = (i - 1)%100
        if i%2 != 0:
           ll = j + (k/2)*18
-          ippt = '{0:03d}'.format(ll)
+          ippt = '{0:03d}'.format(int(ll))
           ptlim = "0."+ippt+"d-13"
        else:
           ll = j + ((k-1)/2)*18
-          ippt = '{0:03d}'.format(ll)
+          ippt = '{0:03d}'.format(int(ll))
           ptlim = "-0."+ippt+"d-13"
     return ptlim 
 
@@ -61,7 +61,7 @@ def main(argv):
         run_type = 'ensemble'
         clone_count = ens_size - 1
         if ens_size > 999:
-            print 'Error: cannot have an ensemble size greater than 999.'
+            print('Error: cannot have an ensemble size greater than 999.')
             sys.exit()
         print('STATUS: ensemble size = ' + str(ens_size))
     
@@ -78,7 +78,7 @@ def main(argv):
         
     #now create cases
     print('STATUS: creating first case ...')
-
+    print(rand_ints)
     #create first case - then clone
     if run_type == 'verify':
         opts_dict['pertlim'] = get_pertlim_uf(rand_ints[0])
@@ -180,11 +180,11 @@ def main(argv):
         if opts_dict['ect'] == 'pop':
             print ("STATUS: ---POP-ECT VERIFICATION CASE COMPLETE---")
             print ("Set up one case using the following init_ts_perturb value:")
-            print get_pertlim_uf(rand_ints[0])
+            print (get_pertlim_uf(rand_ints[0]))
         else:
             print ("STATUS: ---CAM-ECT VERIFICATION CASES COMPLETE---")
             print ("Set up three cases using the following pertlim values:")
-            print get_pertlim_uf(rand_ints[0]) + '   ' + get_pertlim_uf(rand_ints[1]) + "   " + get_pertlim_uf(rand_ints[2])
+            print (get_pertlim_uf(rand_ints[0]) + '   ' + get_pertlim_uf(rand_ints[1]) + "   " + get_pertlim_uf(rand_ints[2]))
     else:
        print ("STATUS: --ENSEMBLE CASES COMPLETE---")
 
diff --git a/tools/statistical_ensemble_test/single_run.py b/tools/statistical_ensemble_test/single_run.py
index 2937bd1a9..4b71e13bf 100644
--- a/tools/statistical_ensemble_test/single_run.py
+++ b/tools/statistical_ensemble_test/single_run.py
@@ -1,4 +1,4 @@
-#! /usr/bin/env python 
+#! /usr/bin/env python
 import sys, getopt, os 
 
 #
@@ -6,46 +6,46 @@ import sys, getopt, os
 #
 def disp_usage(callType):
     if callType == 'ensemble.py':
-        print '\nSets up multiple CESM cases for either an ensemble of runs or a small (CAM-ECT = 3, POP-ECT = 1)'
-        print 'test set (default). Then use pyCECT utilities to create an ensemble'
-        print 'summary file or to evaluate the small test set of runs against the ensemble.'
-        print '  '
-        print '----------------------------'
-        print 'ensemble.py :'
+        print('\nSets up multiple CESM cases for either an ensemble of runs or a small (CAM-ECT = 3, POP-ECT = 1)')
+        print('test set (default). Then use pyCECT utilities to create an ensemble')
+        print('summary file or to evaluate the small test set of runs against the ensemble.')
+        print('  ')
+        print('----------------------------')
+        print('ensemble.py :')
     else: 
-        print '\nSets up a single CESM case. '
-        print '  '
-        print '----------------------------'
-        print 'single_run.py :'
-    print '----------------------------'
-    print ' '
-    print 'Required flags:'
+        print('\nSets up a single CESM case. ')
+        print('  ')
+        print('----------------------------')
+        print('single_run.py :')
+    print('----------------------------')
+    print(' ')
+    print('Required flags:')
     if callType == 'single_run.py':
-        print '  --case <name>    Case name passed on to create_newcase (incl. full path AND same)'
+        print('  --case <name>    Case name passed on to create_newcase (incl. full path AND same)')
     else:
-        print '  --case <name>    Case name passed on to create_newcase (incl. full path AND must end in ".000")'
-    print '  --mach <name>    Machine name passed on to create_newcase'
-    print ' ' 
-    print 'Optional flags (+ all "--" options to create_newcase): '
-    print '  --project <num>    Project number to charge in job scripts'
-    print '  --ect <cam,pop>    Specify whether ensemble is for CAM-ECT or POP-ECT (default = cam)'
+        print('  --case <name>    Case name passed on to create_newcase (incl. full path AND must end in ".000")')
+    print('  --mach <name>    Machine name passed on to create_newcase')
+    print(' ' )
+    print('Optional flags (+ all "--" options to create_newcase): ')
+    print('  --project <num>    Project number to charge in job scripts')
+    print('  --ect <cam,pop>    Specify whether ensemble is for CAM-ECT or POP-ECT (default = cam)')
     if callType == 'single_run.py':
-       print '  --pertlim <num>    Run (CAM or POP) with specified non-zero pertlim'
-    print '  --walltime <hr:mn> Amount of walltime requested (default = 4:30 (CAM-ECT) 2:00 (POP-ECT), or 0:10 with --uf enabled)'
-    print '  --compiler <name>  Compiler to use (default = same as Machine default) '
-    print '  --compset <name>   Compset to use (default = F2000climo (CAM-ECT) or G (POP-ECT))'
-    print '  --res <name>       Resolution to run (default = f19_f19 (CAM-ECT) or T62_g17 (POP-ECT))'
-    print '  --uf               Enable ninth time step runs (ultra-fast mode for CAM-ECT) - otherwise the default is 12-month runs'
+       print('  --pertlim <num>    Run (CAM or POP) with specified non-zero pertlim')
+    print('  --walltime <hr:mn> Amount of walltime requested (default = 4:30 (CAM-ECT) 2:00 (POP-ECT), or 0:10 with --uf enabled)')
+    print('  --compiler <name>  Compiler to use (default = same as Machine default) ')
+    print('  --compset <name>   Compset to use (default = F2000climo (CAM-ECT) or G (POP-ECT))')
+    print('  --res <name>       Resolution to run (default = f19_f19 (CAM-ECT) or T62_g17 (POP-ECT))')
+    print('  --uf               Enable ninth time step runs (ultra-fast mode for CAM-ECT) - otherwise the default is 12-month runs')
     if callType == 'ensemble.py': 
-       print '  --nb               Disables auto building the root case of the ensemble'
-       print '  --ns               Disables auto submitting any members of the ensemble'
-       print '  --ensemble <size>  Build the ensemble (instead of building case(s) with random pertlim values for verification),'
-       print '                     and specify the number of ensemble members to generate (e.g.: 151 for CAM-ECT annual averages '
-       print '                     or 350 for ultra-fast CAM-ECT mode or 40 for POP-ECT)'
+       print('  --nb               Disables auto building the root case of the ensemble')
+       print('  --ns               Disables auto submitting any members of the ensemble')
+       print('  --ensemble <size>  Build the ensemble (instead of building case(s) with random pertlim values for verification),')
+       print('                     and specify the number of ensemble members to generate (e.g.: 151 for CAM-ECT annual averages ')
+       print('                     or 350 for ultra-fast CAM-ECT mode or 40 for POP-ECT)')
     else:
-       print '  --nb               Disables building (and submitting) the single case'
-       print '  --ns               Disables submitting the single case'
-    print '  --help, -h         Prints out this usage message'
+       print('  --nb               Disables building (and submitting) the single case')
+       print('  --ns               Disables submitting the single case')
+    print('  --help, -h         Prints out this usage message')
 
 ########
 def process_args_dict(caller, caller_argv):
@@ -117,7 +117,7 @@ def process_args_dict(caller, caller_argv):
             s_case_flags += ' ' + opt + ' ' + arg
         elif opt == '--pertlim':
             if caller == 'ensemble.py':
-                print "WARNING: pertlim ignored for ensemble.py."
+                print( "WARNING: pertlim ignored for ensemble.py.")
                 opts_dict['pertlim'] = "0"
             else:
                 opts_dict['pertlim'] = arg
@@ -278,7 +278,7 @@ def single_case(opts_dict, case_flags, stat_dir):
     command = './case.setup'
     ret = os.system(command)
     
-    print "STATUS: Adjusting user_nl_* files...."
+    print("STATUS: Adjusting user_nl_* files....")
 
     #POP-ECT
     if opts_dict['ect'] == 'pop':
